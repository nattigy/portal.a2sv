# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateGroupInput {
  country: String
  name: String!
  school: String
}

input CreateRoleInput {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

input CreateSeasonInput {
  endDate: DateTime!
  name: String!
  startDate: DateTime!
}

input CreateUserInput {
  email: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Group {
  country: String
  createdAt: DateTime!
  id: ID!
  name: String!
  school: String
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  accessToken: String!
  userId: Int!
}

type Mutation {
  createGroup(createGroupInput: CreateGroupInput!): Group!
  createRole(data: CreateRoleInput!): Role!
  createSeason(createSeasonInput: CreateSeasonInput!): Season!
  createUser(createUserInput: CreateUserInput!): User!
  deleteGroup(id: Int!): Group!
  deleteRole(id: Float!): Role!
  deleteSeason(id: Int!): Season!
  login(loginInput: LoginInput!): LoginOutput!
  logout: SignupOutput!
  removeUser(id: Int!): User!
  signUp(createUserInput: CreateUserInput!): SignupOutput!
  updateGroup(id: Int!, updateGroupInput: UpdateGroupInput!): Group!
  updateRole(data: UpdateRoleInput!, id: Float!): Role!
  updateSeason(id: Int!, updateSeasonInput: UpdateSeasonInput!): Season!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
  group(id: Int!): Group!
  groups: [Group!]!
  role(id: Float!): Role!
  roles: [Role!]!
  season(id: Int!): Season!
  seasons: [Season!]!
  user(id: Int!): User!
  users(skip: Int, take: Int, where: WhereUserFilter): [User!]!
  welcome: String!
}

type Role {
  createdAt: DateTime
  description: String
  id: Int!
  name: String!
  updatedAt: DateTime
}

type Season {
  createdAt: DateTime
  endDate: DateTime!
  id: ID!
  name: String!
  startDate: DateTime!
  updatedAt: DateTime
}

type SignupOutput {
  userId: Int!
}

enum Status {
  ACTIVE
  INACTIVE
}

input UpdateGroupInput {
  country: String
  name: String
  school: String
}

input UpdateRoleInput {
  createdAt: DateTime
  description: String
  name: String
  updatedAt: DateTime
}

input UpdateSeasonInput {
  endDate: DateTime
  name: String
  startDate: DateTime
}

input UpdateUserInput {
  email: String
  id: Int!
  password: String
}

type User {
  email: String!
  id: ID!
  role: Role!
  roleId: ID!
  status: Status!
}

input WhereUserFilter {
  Status: String
  email: String
}