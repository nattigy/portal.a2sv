# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateGroupInput {
  country: String
  name: String!
  school: String
}

input CreateGroupTopicInput {
  groupId: Int!
  topicId: Int!
}

input CreateProblemInput {
  createdAt: DateTime
  difficulty: String!
  link: String!
  platform: String!
  tags: [CreateTagInput!]
  title: String!
  updatedAt: DateTime
}

input CreateRoleInput {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
}

input CreateSeasonInput {
  endDate: DateTime = "2022-09-07T19:41:52.768Z"
  name: String!
  startDate: DateTime = "2022-09-07T19:41:52.768Z"
}

input CreateTagInput {
  name: String!
}

input CreateTopicInput {
  createdAt: DateTime
  description: String
  name: String!
  season: CreateSeasonInput!
  updatedAt: DateTime
}

input CreateUserInput {
  email: String!
  group: UpdateGroupInput
  password: String!
  role: role = STUDENT
}

input CreateUserProfileInput {
  userId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Group {
  country: String
  createdAt: DateTime!
  id: ID!
  name: String!
  school: String
  topics: [GroupTopic!]
  users: [User!]
}

type GroupTopic {
  createdAt: DateTime
  group: Group
  groupId: Int!
  problems: GroupTopicProblem
  topic: Topic
  topicId: Int!
  updatedAt: DateTime
}

type GroupTopicProblem {
  createdAt: DateTime
  groupId: Int!
  groupTopic: GroupTopic
  problem: Problem
  problemId: Int!
  topicId: Int!
  updatedAt: DateTime
  users: GroupTopicProblemUser
}

type GroupTopicProblemUser {
  attempts: Int!
  groupId: Int!
  groupTopicProblem: GroupTopicProblem
  needHelp: Boolean!
  problemId: Int!
  solutionLink: String
  solved: Boolean!
  topicId: Int!
  user: User
  userId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  accessToken: String!
  userId: Int!
}

type Mutation {
  createGroup(createGroupInput: CreateGroupInput!): Group!
  createGroupTopic(createGroupTopicInput: CreateGroupTopicInput!): GroupTopic!
  createProblem(createProblemInput: CreateProblemInput!): Problem!
  createRole(data: CreateRoleInput!): Role!
  createSeason(createSeasonInput: CreateSeasonInput!): Season!
  createTag(createTagInput: CreateTagInput!): Tag!
  createTopic(createTopicInput: CreateTopicInput!): Topic!
  createUser(createUserInput: CreateUserInput!): User!
  createUserProfile(createUserProfileInput: CreateUserProfileInput!): UserProfile!
  deleteGroup(id: Int!): Group!
  deleteRole(id: Float!): Role!
  deleteSeason(id: Int!): Season!
  deleteTopic(id: Int!): Topic!
  login(loginInput: LoginInput!): LoginOutput!
  logout: SignupOutput!
  removeGroupTopic(groupId: Int!, topicId: Int!): GroupTopic!
  removeProblem(id: Int!): Problem!
  removeTag(id: Int!): Tag!
  removeUser(id: Int!): User!
  removeUserProfile(id: Int!): UserProfile!
  signUp(createUserInput: CreateUserInput!): SignupOutput!
  updateGroup(updateGroupInput: UpdateGroupInput!): Group!
  updateGroupTopic(updateGroupTopicInput: UpdateGroupTopicInput!): GroupTopic!
  updateProblem(updateProblemInput: UpdateProblemInput!): Problem!
  updateRole(data: UpdateRoleInput!, id: Float!): Role!
  updateSeason(id: Int!, updateSeasonInput: UpdateSeasonInput!): Season!
  updateTag(updateTagInput: UpdateTagInput!): Tag!
  updateTopic(id: Int!, updateTopicInput: UpdateTopicInput!): Topic!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserProfile(updateUserProfileInput: UpdateUserProfileInput!): UserProfile!
}

type Problem {
  createdAt: DateTime
  difficulty: String!
  groupTopics: [GroupTopicProblem!]
  id: Int!
  link: String!
  platform: String!
  tags: [Tag!]
  title: String!
  updatedAt: DateTime
}

type Query {
  getMe: User!
  group(id: Int!): Group!
  groupTopic(groupId: Int!, topicId: Int!): GroupTopic!
  groups: [Group!]!

  """Find a unique problem by id"""
  problem(id: Int!): Problem!

  """Find all problems with populated tags"""
  problems: [Problem!]!
  role(id: Float!): Role!
  roles: [Role!]!
  season(id: Int!): Season!
  seasons: [Season!]!
  tag(id: Int!): Tag!
  tags: [Tag!]!
  topic(id: Int!): Topic!
  topics(groupId: Int, seasonId: Int, skip: Int, take: Int): [Topic!]!
  user(id: Int!): User!
  userProfile(id: Int!): UserProfile!
  users(email: String, groupId: Float, role: String, skip: Int, status: String, take: Int): [User!]!
  welcome: String!
}

type Role {
  createdAt: DateTime
  description: String
  id: Int!
  name: String!
  updatedAt: DateTime
}

type Season {
  createdAt: DateTime
  endDate: DateTime!
  id: ID!
  name: String!
  startDate: DateTime!
  topics: [Topic!]
  updatedAt: DateTime
}

type SignupOutput {
  userId: Int!
}

type Tag {
  id: Int!
  name: String!
  problems: [Problem!]
}

type Topic {
  createdAt: DateTime
  description: String
  groups: [GroupTopic!]
  id: ID!
  name: String!
  season: Season
  updatedAt: DateTime
}

input UpdateGroupInput {
  id: Int!
  topics: [UpdateTopicInput!]
  users: [UpdateUserInput!]
}

input UpdateGroupTopicInput {
  groupId: Int
  id: Int!
  topicId: Int
}

input UpdateProblemInput {
  createdAt: DateTime
  difficulty: String
  id: Int!
  link: String
  platform: String
  tags: [CreateTagInput!]
  title: String
  updatedAt: DateTime
}

input UpdateRoleInput {
  createdAt: DateTime
  description: String
  name: String
  updatedAt: DateTime
}

input UpdateSeasonInput {
  endDate: DateTime = "2022-09-07T19:41:52.768Z"
  name: String
  startDate: DateTime = "2022-09-07T19:41:52.768Z"
}

input UpdateTagInput {
  id: Int!
  name: String
}

input UpdateTopicInput {
  createdAt: DateTime
  description: String
  id: Int!
  name: String
  season: CreateSeasonInput
  updatedAt: DateTime
}

input UpdateUserInput {
  email: String
  group: UpdateGroupInput
  groupId: Int
  id: Int!
  password: String
  role: role
  userProfile: UpdateUserProfileInput
}

input UpdateUserProfileInput {
  bio: String
  birthDate: DateTime
  codeforces: String
  educationDegree: String
  educationField: String
  educationPlace: String
  educationYear: Int
  facebook: String
  firstName: String = "John"
  geekforgeeks: String
  github: String
  graduationYear: Int
  hackerrank: String
  id: Int
  instagram: String
  lastName: String = "Doe"
  leetcode: String
  linkedin: String
  phone: String
  photoURL: String
  resumeLink: String
  tshirtSize: String
  twitter: String
  userId: Int
  website: String
}

type User {
  createdAt: DateTime
  email: String!
  group: Group
  groupId: Int
  groupTopicProblems: [GroupTopicProblem!]
  headToGroup: Group
  id: ID!
  role: role!
  status: status!
  updatedAt: DateTime
  userProfile: UserProfile
  userProfilesId: Int
}

type UserProfile {
  bio: String
  birthDate: DateTime
  codeforces: String
  createdAt: DateTime
  educationDegree: String
  educationField: String
  educationPlace: String
  educationYear: Int
  facebook: String
  firstName: String
  geekforgeeks: String
  github: String
  graduationYear: Int
  hackerrank: String
  id: Int!
  instagram: String
  lastName: String
  leetcode: String
  linkedin: String
  phone: String
  photoUrl: String
  resumeLink: String
  tshirtSize: String
  twitter: String
  updatedAt: DateTime
  userId: Int!
  website: String
}

enum role {
  ADMIN
  ASSISTANT
  HEAD_OF_ACADEMY
  HEAD_OF_EDUCATION
  STUDENT
}

enum status {
  ACTIVE
  INACTIVE
}