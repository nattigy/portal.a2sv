generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  country   String?
  school    String?
}

model Season {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime  @default(now())
  endDate   DateTime  @default(now())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Topic     Topic?
}

model Permission {
  id          Int       @id @default(autoincrement())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  users       User[]
}

model User {
  id          Int          @id @default(autoincrement())
  role        Role         @relation(fields: [roleId], references: [id])
  roleId      Int
  email       String       @unique
  password    String
  userprofile UserProfile?
  status      Status
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?
}

model UserProfile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [user_id], references: [id])
  user_id   Int       @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime?
}

model Topic {
  id          Int       @id @default(autoincrement())
  seasonId    Int       @unique
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  Season      Season?   @relation(fields: [seasonId], references: [id])
}

enum Status {
  ACTIVE
  INACTIVE
}

model Problem {
  id         Int    @id @default(autoincrement())
  title      String
  platfrom   String
  link       String
  difficulty String
}
