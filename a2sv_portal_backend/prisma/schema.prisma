generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
}

model Season {
  id             String          @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean         @default(false)
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  duration       String
  seasonType     SeasonTypeEnum  @default(IN_ACTIVE)
  groupSeasons   GroupSeason[]
  seasonContests SeasonContest[]
  seasonTopics   SeasonTopic[]
}

model Group {
  id           String        @id @default(uuid())
  name         String        @unique
  country      String?
  school       String?
  headId       String?       @unique
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  head         User?         @relation("GroupHead", fields: [headId], references: [id])
  groupSeasons GroupSeason[]
  users        User[]
}

model Contest {
  id                     String                   @id @default(uuid())
  name                   String
  link                   String
  div                    String?
  startTime              DateTime
  endTime                DateTime
  createdAt              DateTime?                @default(now())
  updatedAt              DateTime?                @updatedAt
  GroupSeasonContest     GroupSeasonContest[]
  problems               Problem[]
  seasonContests         SeasonContest[]
  UserGroupSeasonContest UserGroupSeasonContest[]
}

model Topic {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  description          String
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt
  GroupSeasonTopic     GroupSeasonTopic[]
  seasonTopics         SeasonTopic[]
  UserGroupSeasonTopic UserGroupSeasonTopic[]
}

model Problem {
  id                            String                          @id @default(uuid())
  title                         String
  platform                      String
  link                          String                          @unique
  createdAt                     DateTime?                       @default(now())
  updatedAt                     DateTime?                       @updatedAt
  difficulty                    ProblemDifficultyTypeEnum
  contestId                     String?
  GroupSeasonContestProblem     GroupSeasonContestProblem[]
  GroupSeasonTopicProblem       GroupSeasonTopicProblem[]
  contest                       Contest?                        @relation(fields: [contestId], references: [id])
  seasonContestProblems         SeasonContestProblem[]
  seasonTopicProblems           SeasonTopicProblem[]
  UserGroupSeasonContestProblem UserGroupSeasonContestProblem[]
  UserGroupSeasonTopicProblem   UserGroupSeasonTopicProblem[]
  tags                          Tag[]                           @relation("ProblemToTag")
}

model User {
  id                 String            @id @default(uuid())
  role               RoleEnum
  email              String            @unique
  password           String
  groupId            String?
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?
  firstName          String
  lastName           String
  middleName         String
  status             StatusEnum
  // verified           Boolean?          @default(true)
  headToGroup        Group?            @relation("GroupHead")
  headToGroupSeasons GroupSeason[]
  group              Group?            @relation(fields: [groupId], references: [id])
  userGroupSeasons   UserGroupSeason[]
  userProfile        UserProfile?
}

model SeasonTopic {
  seasonId            String
  topicId             String
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  groupSeasonTopics   GroupSeasonTopic[]
  season              Season               @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  topic               Topic                @relation(fields: [topicId], references: [id], onDelete: Cascade)
  seasonTopicProblems SeasonTopicProblem[]

  @@id([seasonId, topicId])
}

model SeasonTopicProblem {
  seasonId                 String
  topicId                  String
  problemId                String
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  groupSeasonTopicProblems GroupSeasonTopicProblem[]
  problem                  Problem                   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)

  @@id([seasonId, topicId, problemId])
}

model SeasonContest {
  seasonId              String
  contestId             String
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
  groupSeasonContests   GroupSeasonContest[]
  contest               Contest                @relation(fields: [contestId], references: [id], onDelete: Cascade)
  season                Season                 @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonContestProblems SeasonContestProblem[]

  @@id([seasonId, contestId])
}

model SeasonContestProblem {
  seasonId                   String
  contestId                  String
  problemId                  String
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  groupSeasonContestProblems GroupSeasonContestProblem[]
  problem                    Problem                     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  seasonContest              SeasonContest               @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)

  @@id([seasonId, contestId, problemId])
}

model GroupSeason {
  groupId             String
  seasonId            String
  isActive            Boolean              @default(false)
  headId              String
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  endDate             DateTime?
  joinRequest         JoinRequestEnum      @default(REQUESTED)
  startDate           DateTime
  group               Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  head                User                 @relation(fields: [headId], references: [id])
  season              Season               @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  groupSeasonContests GroupSeasonContest[]
  groupSeasonTopics   GroupSeasonTopic[]
  userGroupSeasons    UserGroupSeason[]

  @@id([groupId, seasonId])
}

model GroupSeasonTopic {
  groupId                  String
  seasonId                 String
  topicId                  String
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  groupSeason              GroupSeason               @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  topic                    Topic                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  groupSeasonTopicProblems GroupSeasonTopicProblem[]
  userGroupSeasonTopics    UserGroupSeasonTopic[]

  @@id([groupId, seasonId, topicId])
}

model GroupSeasonTopicProblem {
  groupId                      String
  seasonId                     String
  topicId                      String
  problemId                    String
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  groupSeasonTopic             GroupSeasonTopic              @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  problem                      Problem                       @relation(fields: [problemId], references: [id], onDelete: Cascade)
  seasonTopicProblem           SeasonTopicProblem            @relation(fields: [seasonId, topicId, problemId], references: [seasonId, topicId, problemId], onDelete: Cascade)
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]

  @@id([groupId, seasonId, topicId, problemId])
}

model GroupSeasonContest {
  groupId                    String
  seasonId                   String
  contestId                  String
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  endTime                    DateTime
  startTime                  DateTime
  contest                    Contest                     @relation(fields: [contestId], references: [id], onDelete: Cascade)
  groupSeason                GroupSeason                 @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  seasonContest              SeasonContest               @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)
  groupSeasonContestProblems GroupSeasonContestProblem[]
  userGroupSeasonContests    UserGroupSeasonContest[]

  @@id([groupId, seasonId, contestId])
}

model GroupSeasonContestProblem {
  groupId                        String
  seasonId                       String
  contestId                      String
  problemId                      String
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  groupSeasonContest             GroupSeasonContest              @relation(fields: [groupId, seasonId, contestId], references: [groupId, seasonId, contestId], onDelete: Cascade)
  problem                        Problem                         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  seasonContestProblem           SeasonContestProblem            @relation(fields: [seasonId, contestId, problemId], references: [seasonId, contestId, problemId], onDelete: Cascade)
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([groupId, seasonId, contestId, problemId])
}

model UserGroupSeason {
  userId                  String
  groupId                 String
  seasonId                String
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  groupSeason             GroupSeason              @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroupSeasonContests UserGroupSeasonContest[]
  userGroupSeasonTopics   UserGroupSeasonTopic[]

  @@id([userId, groupId, seasonId])
}

model UserGroupSeasonTopic {
  userId                       String
  groupId                      String
  seasonId                     String
  topicId                      String
  comfortLevel                 ComfortLevelEnum              @default(UNCOMFORTABLE)
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  groupSeasonTopic             GroupSeasonTopic              @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  topic                        Topic                         @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userGroupSeason              UserGroupSeason               @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]

  @@id([userId, groupId, seasonId, topicId])
}

model UserGroupSeasonTopicProblem {
  userId                  String
  groupId                 String
  seasonId                String
  topicId                 String
  problemId               String
  solved                  Boolean                 @default(false)
  solutionLink            String?
  attempts                Int                     @default(0)
  timeDedicated           Int                     @default(0)
  needHelp                Boolean                 @default(false)
  createdAt               DateTime?               @default(now())
  updatedAt               DateTime?               @updatedAt
  groupSeasonTopicProblem GroupSeasonTopicProblem @relation(fields: [groupId, seasonId, topicId, problemId], references: [groupId, seasonId, topicId, problemId], onDelete: Cascade)
  problem                 Problem                 @relation(fields: [problemId], references: [id], onDelete: Cascade)
  userGroupSeasonTopic    UserGroupSeasonTopic    @relation(fields: [userId, groupId, seasonId, topicId], references: [userId, groupId, seasonId, topicId], onDelete: Cascade)

  @@id([userId, groupId, seasonId, topicId, problemId])
}

model UserGroupSeasonContest {
  userId                         String
  groupId                        String
  seasonId                       String
  contestId                      String
  problemsSolved                 Int                             @default(0)
  wrongSubmissions               Int                             @default(0)
  rank                           Int                             @default(0)
  timeSpent                      Int                             @default(0)
  contestAttended                Boolean                         @default(false)
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  contest                        Contest                         @relation(fields: [contestId], references: [id], onDelete: Cascade)
  groupSeasonContest             GroupSeasonContest              @relation(fields: [groupId, seasonId, contestId], references: [groupId, seasonId, contestId], onDelete: Cascade)
  userGroupSeason                UserGroupSeason                 @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([userId, groupId, seasonId, contestId])
}

model UserGroupSeasonContestProblem {
  userId                    String
  groupId                   String
  seasonId                  String
  contestId                 String
  problemId                 String
  status                    UserContestProblemStatusEnum @default(NOT_SOLVED)
  numberOfAttempts          Int
  numberOfMinutes           Int
  createdAt                 DateTime?                    @default(now())
  updatedAt                 DateTime?                    @updatedAt
  groupSeasonContestProblem GroupSeasonContestProblem    @relation(fields: [groupId, seasonId, contestId, problemId], references: [groupId, seasonId, contestId, problemId], onDelete: Cascade)
  problem                   Problem                      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  userGroupSeasonContest    UserGroupSeasonContest       @relation(fields: [userId, groupId, seasonId, contestId], references: [userId, groupId, seasonId, contestId], onDelete: Cascade)

  @@id([userId, groupId, seasonId, contestId, problemId])
}

model UserProfile {
  id                     String                     @id @default(uuid())
  userId                 String                     @unique
  photoUrl               String?
  phone                  String
  birthDate              DateTime?
  resumeLink             String
  github                 String?
  linkedin               String?
  twitter                String?
  facebook               String?
  instagram              String?
  leetcode               String
  codeforces             String
  hackerrank             String
  geekforgeeks           String?
  educationPlace         String
  educationYear          Int?
  educationDegree        String?
  educationField         String?
  graduationYear         Int?
  tshirtSize             String?
  website                String?
  bio                    String
  createdAt              DateTime?                  @default(now())
  updatedAt              DateTime?                  @updatedAt
  countryCode            String
  currentEducationStatus CurrentEducationStatusEnum
  currentWorkStatus      CurrentWorkStatusEnum
  user                   User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userProfileAddress     UserProfileAddress?
}

model UserProfileAddress {
  profileId   String      @id @unique
  country     String
  city        String
  userProfile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[] @relation("ProblemToTag")
}

model Otp {
  id        String    @id @default(uuid())
  email     String    @unique
  code      Int
  createdAt DateTime? @default(now())
  updatedAt DateTime?
}

enum StatusEnum {
  ACTIVE
  INACTIVE
}

enum JoinRequestEnum {
  REQUESTED
  APPROVED
  REJECTED
}

enum CurrentWorkStatusEnum {
  EMPLOYED
  UNEMPLOYED
}

enum CurrentEducationStatusEnum {
  CONTINUING
  GRADUATED
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

enum ComfortLevelEnum {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

enum SeasonTypeEnum {
  CAMP
  EDUCATION
  PROJECT
  IN_ACTIVE
}

enum ProblemDifficultyTypeEnum {
  EASY
  MEDIUM
  HARD
}

enum UserContestProblemStatusEnum {
  SOLVED_IN_CONTEST
  SOLVED_AFTER_CONTEST
  NOT_SOLVED
  UNABLE_TO_SOLVE
}
