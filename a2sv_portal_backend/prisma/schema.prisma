generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
  //  url      = env("DB_URL")
  //  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id                  String               @id @default(uuid())
  name                String               @unique
  country             String?
  school              String?
  headId              String?              @unique
  head                User?                @relation("GroupHead", fields: [headId], references: [id])
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  users               User[]
  groupSeasons        GroupSeason[]
  groupSeasonTopics   GroupSeasonTopic[]
  groupSeasonContests GroupSeasonContest[]
}

model Season {
  id              String            @id @default(uuid())
  name            String
  seasonType      SeasonTypeEnum
  duration        String
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean           @default(false)
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt
  groupSeasons    GroupSeason[]
  seasonTopics    SeasonTopic[]
  seasonContests  SeasonContest[]
  UserSeason      UserSeason[]
  UserSeasonTopic UserSeasonTopic[]
}

model Contest {
  id                 String              @id @default(uuid())
  name               String
  link               String
  div                String?
  startTime          DateTime
  endTime            DateTime
  problems           Problem[]
  createdAt          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
  seasonContests     SeasonContest[]
  userSeasonContests UserSeasonContest[]
}

model Topic {
  id               String            @id @default(uuid())
  name             String
  description      String
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  //  problems        Problem[]
  seasonTopics     SeasonTopic[]
  userSeasonTopics UserSeasonTopic[]
}

model Problem {
  id                        String                     @id @default(uuid())
  title                     String
  platform                  String
  link                      String
  difficulty                ProblemDifficultyTypeEnum
  tags                      Tag[]
  //  topicId                   String?
  //  topic                     Topic?                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt                 DateTime?                  @default(now())
  updatedAt                 DateTime?                  @updatedAt
  contests                  Contest[]
  seasonTopicProblems       SeasonTopicProblem[]
  userSeasonContestProblems UserSeasonContestProblem[]
  GroupSeasonTopicProblem   GroupSeasonTopicProblem[]
}

model User {
  id                      String                   @id @default(uuid())
  firstName               String
  middleName              String
  lastName                String
  role                    RoleEnum
  email                   String                   @unique
  password                String
  status                  StatusEnum
  group                   Group?                   @relation(fields: [groupId], references: [id])
  groupId                 String?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?
  headToGroup             Group?                   @relation("GroupHead")
  userSeasonContests      UserSeasonContest[]
  userSeasonTopicProblems UserSeasonTopicProblem[]
  userProfile             UserProfile?
  GroupSeason             GroupSeason[]
  UserSeason              UserSeason[]
  UserSeasonTopic         UserSeasonTopic[]
}

model GroupSeason {
  groupId     String
  seasonId    String
  isActive    Boolean         @default(false)
  headId      String
  joinRequest JoinRequestEnum @default(REQUESTED)
  startDate   DateTime
  endDate     DateTime?
  //group stat info should be added here
  //number of students, total submissions, total accepted, acceptance rate
  //group contest rating, number of contest attended,
  //join request approved / pendding
  group       Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  season      Season          @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  head        User?           @relation(fields: [headId], references: [id])
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt

  @@id([groupId, seasonId])
}

model UserSeason {
  userId    String
  seasonId  String
  //user stat info should be added here
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  season    Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, seasonId])
}

model UserSeasonTopic {
  userId       String
  seasonId     String
  topicId      String
  comfortLevel ComfortLevelEnum @default(UNCOMFORTABLE)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  seasonTopic  SeasonTopic      @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  createdAt    DateTime?        @default(now())
  updatedAt    DateTime?        @updatedAt
  Season       Season           @relation(fields: [seasonId], references: [id])
  Topic        Topic            @relation(fields: [topicId], references: [id])

  @@id([userId, seasonId, topicId])
}

model SeasonTopic {
  seasonId            String
  topicId             String
  season              Season?              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  topic               Topic?               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  groupSeasonTopics   GroupSeasonTopic[]
  seasonTopicProblems SeasonTopicProblem[]
  UserSeasonTopic     UserSeasonTopic[]

  @@id([seasonId, topicId])
}

model SeasonContest {
  seasonId            String
  contestId           String
  season              Season?              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  contest             Contest?             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  groupSeasonContests GroupSeasonContest[]
  UserSeasonContest   UserSeasonContest[]

  @@id([seasonId, contestId])
}

model GroupSeasonTopic {
  groupId                  String
  seasonId                 String
  topicId                  String
  //group season topic stat should be added here
  // comfortablity percentage
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  group                    Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  groupSeasonTopicProblems GroupSeasonTopicProblem[]

  @@id([groupId, seasonId, topicId])
}

model GroupSeasonTopicProblem {
  groupId          String
  seasonId         String
  topicId          String
  problemId        String
  groupSeasonTopic GroupSeasonTopic? @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  problem          Problem           @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([groupId, seasonId, topicId, problemId])
}

model SeasonTopicProblem {
  seasonId                String
  topicId                 String
  problemId               String
  seasonTopic             SeasonTopic?             @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  problem                 Problem                  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  userSeasonTopicProblems UserSeasonTopicProblem[]

  @@id([seasonId, topicId, problemId])
}

model GroupSeasonContest {
  groupId       String
  seasonId      String
  contestId     String
  //group season contest stat should be added here
  group         Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  seasonContest SeasonContest @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt

  @@id([groupId, seasonId, contestId])
}

model UserSeasonContest {
  userId                   String
  seasonId                 String
  contestId                String
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  seasonContest            SeasonContest              @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)
  problemsSolved           Int                        @default(0)
  wrongSubmissions         Int                        @default(0)
  rank                     Int                        @default(0)
  timeSpent                Int                        @default(0)
  contestAttended          Boolean                    @default(false)
  createdAt                DateTime?                  @default(now())
  updatedAt                DateTime?                  @updatedAt
  UserSeasonContestProblem UserSeasonContestProblem[]
  Contest                  Contest                    @relation(fields: [contestId], references: [id])

  @@id([userId, seasonId, contestId])
}

model UserSeasonContestProblem {
  userId            String
  seasonId          String
  contestId         String
  problemId         String
  userSeasonContest UserSeasonContest?           @relation(fields: [userId, seasonId, contestId], references: [userId, seasonId, contestId], onDelete: Cascade)
  problem           Problem                      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  statusEnum        UserContestProblemStatusEnum @default(NOT_SOLVED)
  numberOfAttempts  Int
  numberOfMinutes   Int
  createdAt         DateTime?                    @default(now())
  updatedAt         DateTime?                    @updatedAt

  @@id([userId, seasonId, contestId, problemId])
}

model UserSeasonTopicProblem {
  seasonId           String
  topicId            String
  problemId          String
  userId             String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  solved             Boolean            @default(false)
  solutionLink       String?
  attempts           Int                @default(0)
  timeDedicated      Int                @default(0)
  needHelp           Boolean            @default(false)
  seasonTopicProblem SeasonTopicProblem @relation(fields: [seasonId, topicId, problemId], references: [seasonId, topicId, problemId], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, seasonId, topicId, problemId])
}

model UserProfile {
<<<<<<< HEAD
  id              String    @id @default(uuid())
  userId          String    @unique
  firstName       String?
  lastName        String?
  photoUrl        String?
  phone           String?
  birthDate       DateTime?
  resumeLink      String?
  github          String?
  linkedin        String?
  twitter         String?
  facebook        String?
  instagram       String?
  leetcode        String?
  codeforces      String?
  hackerrank      String?
  geekforgeeks    String?
  educationPlace  String?
  educationYear   Int?
  educationDegree String?
  educationField  String?
  graduationYear  Int?
  tshirtSize      String?
  website         String?
  bio             String?
  country         String?
  city            String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
=======
  id                     String                     @id @default(uuid())
  userId                 String                     @unique
  //  firstName                  String
  //  middleName                 String?
  //  lastName                   String
  photoUrl               String?
  phone                  String
  countryCode            String
  birthDate              DateTime?
  resumeLink             String
  github                 String?
  linkedin               String?
  twitter                String?
  facebook               String?
  instagram              String?
  //  programmingPlatformHandles ProgrammingPlatformHandle[]
  //  socialMediaPlatformHandles SocialMediaPlatformHandle[]
  leetcode               String
  codeforces             String
  hackerrank             String
  geekforgeeks           String?
  currentWorkStatus      CurrentWorkStatusEnum
  currentEducationStatus CurrentEducationStatusEnum
  educationPlace         String
  educationYear          Int?
  educationDegree        String?
  educationField         String?
  graduationYear         Int?
  tshirtSize             String?
  website                String?
  bio                    String
  userProfileAddress     UserProfileAddress?
  //  country         String?
  //  city            String?
  createdAt              DateTime?                  @default(now())
  updatedAt              DateTime?                  @updatedAt
  user                   User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//model ProgrammingPlatformHandle {
//  id             String      @id @default(uuid())
//  profileId      String
//  //type PlatformTypeEnum
//  platformName   String
//  platformHandle String
//  iconUrl        String
//  userProfile    UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//}
//
//model SocialMediaPlatformHandle {
//  id             String      @id @default(uuid())
//  profileId      String
//  //type PlatformTypeEnum
//  platformName   String
//  platformHandle String
//  iconUrl        String
//  userProfile    UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//}

model UserProfileAddress {
  profileId   String      @unique
  country     String
  city        String
  userProfile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId])
>>>>>>> ab4edd96dfbfbdcd0ecf0e67205a10f128c45b0e
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[]
}

//enum PlatformTypeEnum {
//  SOCIAL_MEDIA
//  PROGRAMMING
//}

enum StatusEnum {
  ACTIVE
  INACTIVE
}

enum JoinRequestEnum {
  REQUESTED
  APPROVED
  REJECTED
}

enum CurrentWorkStatusEnum {
  EMPLOYED
  UNEMPLOYED
}

enum CurrentEducationStatusEnum {
  CONTINUING
  GRADUATED
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

enum ComfortLevelEnum {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

enum SeasonTypeEnum {
  CAMP
  EDUCATION
  PROJECT
  IN_ACTIVE
}

enum ProblemDifficultyTypeEnum {
  EASY
  MEDIUM
  HARD
}

enum UserContestProblemStatusEnum {
  SOLVED_IN_CONTEST
  SOLVED_AFTER_CONTEST
  NOT_SOLVED
  UNABLE_TO_SOLVE
}

//model UserProblem {
//  problemId String
//  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
//  userId    String
//  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  solved    Boolean  @default(false)
//
//  @@id([problemId, userId])
//}
//
//model UserAnalytics {
//  userId      String
//  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt   DateTime @default(now()) @db.Date
//  updatedAt   DateTime @updatedAt @db.Date
//  solvedCount Int      @default(0)
//  wrongCount  Int      @default(0)
//
//  @@id([userId, createdAt])
//}
