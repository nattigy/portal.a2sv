generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id        Int          @id @default(autoincrement())
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  name      String
  country   String?
  school    String?
  users     User[]
  topics    GroupTopic[]
  headId    Int          @unique
  head      User?        @relation("GroupHead", fields: [headId], references: [id])
}

model Season {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime  @default(now())
  endDate   DateTime  @default(now())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  topics    Topic[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model User {
  id                 Int                     @id @default(autoincrement())
  role               RoleEnum                @default(STUDENT)
  email              String                  @unique
  password           String
  userprofile        UserProfile?
  status             Status
  group              Group?                  @relation(fields: [groupId], references: [id])
  groupId            Int?
  createdAt          DateTime?               @default(now())
  updatedAt          DateTime?
  groupTopicProblems GroupTopicProblemUser[]
  headToGroup        Group?                  @relation("GroupHead")
}

model UserProfile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [user_id], references: [id])
  user_id   Int       @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime?
}

model Topic {
  id          Int          @id @default(autoincrement())
  seasonId    Int          @unique
  name        String
  description String?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?
  season      Season?      @relation(fields: [seasonId], references: [id])
  groups      GroupTopic[]
}

enum Status {
  ACTIVE
  INACTIVE
}

model Problem {
  id          Int                 @id @default(autoincrement())
  title       String
  platform    String
  link        String
  difficulty  String
  tags        Tag[]
  createdAt   DateTime?           @default(now())
  updatedAt   DateTime?           @updatedAt
  groupTopics GroupTopicProblem[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

model GroupTopic {
  groupId   Int
  topicId   Int
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  group     Group               @relation(fields: [groupId], references: [id])
  topic     Topic               @relation(fields: [topicId], references: [id])
  problems  GroupTopicProblem[]

  @@id([groupId, topicId])
}

model GroupTopicProblem {
  problemId  Int
  groupId    Int
  topicId    Int
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  groupTopic GroupTopic              @relation(fields: [groupId, topicId], references: [groupId, topicId])
  problem    Problem                 @relation(fields: [problemId], references: [id])
  users      GroupTopicProblemUser[]

  @@id([problemId, groupId, topicId])
}

model GroupTopicProblemUser {
  problemId         Int
  groupId           Int
  topicId           Int
  userId            Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  groupTopicProblem GroupTopicProblem @relation(fields: [groupId, topicId, problemId], references: [groupId, topicId, problemId])
  user              User              @relation(fields: [userId], references: [id])
  solved            Boolean           @default(false)
  solutionLink      String?
  attempts          Int               @default(0)
  needHelp          Boolean           @default(false)

  @@id([groupId, topicId, problemId, userId])
}
