generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Season {
  id           String         @id @default(uuid())
  name         String
  seasonType   SeasonTypeEnum @default(IN_ACTIVE)
  duration     String
  isActive     Boolean        @default(false)
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  seasonStats  SeasonStats?
  seasonTopics SeasonTopic[]
  groupSeasons GroupSeason[]
}

model SeasonStats {
  seasonId               String @unique
  numberOfProblemsSolved Int    @default(0)
  // contests joined, topics covered, number of submissions
  season                 Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@id([seasonId])
}

model Group {
  id           String        @id @default(uuid())
  name         String        @unique
  country      String?
  school       String?
  headId       String?
  head         User?         @relation("GroupHead", fields: [headId], references: [id])
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  users        User[]
  groupSeasons GroupSeason[]
}

model Contest {
  id                      String                   @id @default(uuid())
  name                    String
  link                    String
  div                     String?
  date                    DateTime
  duration                String
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  contestProblems         ContestProblem[]
  groupSeasonContests     GroupSeasonContest[]
  userGroupSeasonContests UserGroupSeasonContest[]
}

model Topic {
  id                    String                 @id @default(uuid())
  name                  String                 @unique
  description           String?
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
  seasonTopics          SeasonTopic[]
  groupSeasonTopics     GroupSeasonTopic[]
  userGroupSeasonTopics UserGroupSeasonTopic[]
}

model Problem {
  id                           String                        @id @default(uuid())
  title                        String
  platform                     String
  link                         String                        @unique
  difficulty                   ProblemDifficultyTypeEnum
  tags                         Tag[]
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  seasonTopicProblems          SeasonTopicProblem[]
  groupSeasonTopicProblems     GroupSeasonTopicProblem[]
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]
  contestProblems              ContestProblem[]
}

model User {
  id               String            @id @default(uuid())
  role             RoleEnum
  email            String            @unique
  password         String
  status           StatusEnum        @default(INACTIVE)
  verified         Boolean?          @default(false)
  groupId          String?
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?
  headToGroups     Group[]           @relation("GroupHead")
  group            Group?            @relation(fields: [groupId], references: [id])
  userProfile      UserProfile?
  groupSeasonHeads GroupSeasonHead[]
  userGroupSeasons UserGroupSeason[]
}

model SeasonTopic {
  seasonId             String
  topicId              String
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  season               Season                @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  topic                Topic                 @relation(fields: [topicId], references: [id], onDelete: Cascade)
  seasonTopicProblems  SeasonTopicProblem[]
  seasonTopicResources SeasonTopicResource[]
  groupSeasonTopics    GroupSeasonTopic[]

  @@id([seasonId, topicId])
}

model SeasonTopicProblem {
  seasonId                 String
  topicId                  String
  problemId                String
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  problem                  Problem                   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  groupSeasonTopicProblems GroupSeasonTopicProblem[]

  @@id([seasonId, topicId, problemId])
}

model SeasonTopicResource {
  id          String           @default(uuid())
  seasonId    String
  topicId     String
  type        ResourceTypeEnum
  name        String
  description String
  link        String
  seasonTopic SeasonTopic      @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  createdAt   DateTime?        @default(now())
  updatedAt   DateTime?        @updatedAt

  @@id([id, seasonId, topicId])
}

model ContestProblem {
  contestId                      String
  problemId                      String
  // problem stat goes here
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  contest                        Contest                         @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem                        Problem                         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  groupSeasonContestProblems     GroupSeasonContestProblem[]
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([contestId, problemId])
}

model GroupSeason {
  groupId                  String
  seasonId                 String
  isActive                 Boolean              @default(false)
  joinRequest              JoinRequestEnum      @default(REQUESTED)
  startDate                DateTime
  endDate                  DateTime?
  numberOfStudents         Int?                 @default(0)
  totalSubmissions         Int?                 @default(0)
  totalAcceptedSubmissions Int?                 @default(0)
  acceptanceRate           Float?               @default(0.0)
  averageContestRating     Float?               @default(0.0)
  totalContestsAttended    Int?                 @default(0)
  easyCount                Int?                 @default(0)
  mediumCount              Int?                 @default(0)
  hardCount                Int?                 @default(0)
  group                    Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  season                   Season               @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  createdAt                DateTime?            @default(now())
  updatedAt                DateTime?            @updatedAt
  groupSeasonHeads         GroupSeasonHead[]
  groupSeasonTopics        GroupSeasonTopic[]
  userGroupSeasons         UserGroupSeason[]
  groupSeasonContests      GroupSeasonContest[]

  @@id([groupId, seasonId])
}

model GroupSeasonHead {
  groupId     String
  seasonId    String
  headId      String
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @updatedAt
  groupSeason GroupSeason @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  user        User        @relation(fields: [headId], references: [id], onDelete: Cascade)

  @@id([groupId, seasonId, headId])
}

model GroupSeasonTopic {
  groupId                  String
  seasonId                 String
  topicId                  String
  //group season topic stat should be added here
  numberOfProblems         Int?                      @default(0)
  comfortability           Float?                    @default(0.0)
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  groupSeason              GroupSeason               @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  topic                    Topic                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  groupSeasonTopicProblems GroupSeasonTopicProblem[]
  userGroupSeasonTopics    UserGroupSeasonTopic[]

  @@id([groupId, seasonId, topicId])
}

model GroupSeasonTopicProblem {
  groupId                      String
  seasonId                     String
  topicId                      String
  problemId                    String
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  groupSeasonTopic             GroupSeasonTopic              @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  seasonTopicProblem           SeasonTopicProblem            @relation(fields: [seasonId, topicId, problemId], references: [seasonId, topicId, problemId], onDelete: Cascade)
  problem                      Problem                       @relation(fields: [problemId], references: [id], onDelete: Cascade)
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]

  @@id([groupId, seasonId, topicId, problemId])
}

model GroupSeasonContest {
  groupId                    String
  seasonId                   String
  contestId                  String
  //group season contest stat should be added here
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  groupSeason                GroupSeason                 @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  contest                    Contest                     @relation(fields: [contestId], references: [id], onDelete: Cascade)
  groupSeasonContestProblems GroupSeasonContestProblem[]
  userGroupSeasonContests    UserGroupSeasonContest[]

  @@id([groupId, seasonId, contestId])
}

model GroupSeasonContestProblem {
  groupId                        String
  seasonId                       String
  contestId                      String
  problemId                      String
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  groupSeasonContest             GroupSeasonContest              @relation(fields: [groupId, seasonId, contestId], references: [groupId, seasonId, contestId], onDelete: Cascade)
  contestProblem                 ContestProblem                  @relation(fields: [contestId, problemId], references: [contestId, problemId], onDelete: Cascade)
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([groupId, seasonId, contestId, problemId])
}

model UserGroupSeason {
  userId                       String
  groupId                      String
  seasonId                     String
  // rank                          Int?                           @default(0)
  totalSubmissions             Int?                           @default(0)
  totalAcceptedSubmissions     Int?                           @default(0)
  acceptanceRate               Float?                         @default(0.0)
  averageContestRating         Float?                         @default(0.0)
  totalContestsAttended        Int?                           @default(0)
  easyCount                    Int?                           @default(0)
  mediumCount                  Int?                           @default(0)
  hardCount                    Int?                           @default(0)
  user                         User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupSeason                  GroupSeason                    @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  createdAt                    DateTime?                      @default(now())
  updatedAt                    DateTime?                      @updatedAt
  userGroupSeasonTopics        UserGroupSeasonTopic[]
  userGroupSeasonContests      UserGroupSeasonContest[]
  userGroupSeasonDataAnalytics UserGroupSeasonDataAnalytics[]

  // userGroupSeasonRanks         UserGroupSeasonRanks[]
  @@id([userId, groupId, seasonId])
}

model UserGroupSeasonDataAnalytics {
  userId          String
  groupId         String
  seasonId        String
  solvedCount     Int             @default(0)
  wrongCount      Int             @default(0)
  month           Int
  week            Int
  year            Int
  userGroupSeason UserGroupSeason @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @db.Date
  updatedAt       DateTime        @updatedAt @db.Date

  @@id([userId, groupId, seasonId, createdAt])
}

// model UserGroupSeasonRanks {
//   userId            String
//   groupId           String
//   seasonId          String
//   dailyGroupRank    Int             @default(0)
//   dailySeasonRank   Int             @default(0)
//   weeklyGroupRank   Int             @default(0)
//   weeklySeasonRank  Int             @default(0)
//   monthlyGroupRank  Int             @default(0)
//   monthlySeasonRank Int             @default(0)
//   userGroupSeason   UserGroupSeason @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
//   createdAt         DateTime        @default(now()) @db.Date
//   updatedAt         DateTime        @updatedAt @db.Date
//
//   @@id([userId, groupId, seasonId, createdAt])
// }

model UserGroupSeasonTopic {
  userId                       String
  groupId                      String
  seasonId                     String
  topicId                      String
  comfortLevel                 ComfortLevelEnum              @default(UNCOMFORTABLE)
  totalSubmissions             Int?                          @default(0)
  totalAcceptedSubmissions     Int?                          @default(0)
  comfortabilityPercentage     Float?                        @default(0.0)
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  userGroupSeason              UserGroupSeason               @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  groupSeasonTopic             GroupSeasonTopic              @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  topic                        Topic                         @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]

  @@id([userId, groupId, seasonId, topicId])
}

model UserGroupSeasonTopicProblem {
  userId                  String
  groupId                 String
  seasonId                String
  topicId                 String
  problemId               String
  status                  UserTopicProblemStatusEnum @default(NOT_SOLVED)
  numberOfAttempts        Int                        @default(0)
  numberOfMinutes         Float                      @default(0.0)
  solutionLink            String?
  createdAt               DateTime?                  @default(now())
  updatedAt               DateTime?                  @updatedAt
  statusUpdatedAt         DateTime?                  @updatedAt @db.Date
  userGroupSeasonTopic    UserGroupSeasonTopic       @relation(fields: [userId, groupId, seasonId, topicId], references: [userId, groupId, seasonId, topicId], onDelete: Cascade)
  groupSeasonTopicProblem GroupSeasonTopicProblem    @relation(fields: [groupId, seasonId, topicId, problemId], references: [groupId, seasonId, topicId, problemId], onDelete: Cascade)
  problem                 Problem                    @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([userId, groupId, seasonId, topicId, problemId])
}

model UserGroupSeasonContest {
  userId                         String
  groupId                        String
  seasonId                       String
  contestId                      String
  problemsSolved                 Int                             @default(0)
  wrongSubmissions               Int                             @default(0)
  rank                           Int                             @default(0)
  timeSpent                      Float                           @default(0.0)
  contestAttended                Boolean                         @default(false)
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  userGroupSeason                UserGroupSeason                 @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  groupSeasonContest             GroupSeasonContest              @relation(fields: [groupId, seasonId, contestId], references: [groupId, seasonId, contestId], onDelete: Cascade)
  contest                        Contest                         @relation(fields: [contestId], references: [id], onDelete: Cascade)
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([userId, groupId, seasonId, contestId])
}

model UserGroupSeasonContestProblem {
  userId                    String
  groupId                   String
  seasonId                  String
  contestId                 String
  problemId                 String
  status                    UserContestProblemStatusEnum @default(NOT_SOLVED)
  numberOfAttempts          Int                          @default(0)
  numberOfMinutes           Float                        @default(0.0)
  createdAt                 DateTime?                    @default(now())
  updatedAt                 DateTime?                    @updatedAt
  userGroupSeasonContest    UserGroupSeasonContest       @relation(fields: [userId, groupId, seasonId, contestId], references: [userId, groupId, seasonId, contestId], onDelete: Cascade)
  groupSeasonContestProblem GroupSeasonContestProblem    @relation(fields: [groupId, seasonId, contestId, problemId], references: [groupId, seasonId, contestId, problemId], onDelete: Cascade)
  contestProblem            ContestProblem               @relation(fields: [contestId, problemId], references: [contestId, problemId], onDelete: Cascade)

  @@id([userId, groupId, seasonId, contestId, problemId])
}

model UserProfile {
  userId                 String                     @id @unique
  firstName              String
  middleName             String
  lastName               String
  email                  String                     @unique
  photoUrl               String
  phone                  String
  countryCode            String
  birthDate              DateTime
  resumeLink             String
  telegram               String
  github                 String
  linkedin               String
  twitter                String?
  instagram              String?
  leetcode               String
  codeforces             String
  hackerrank             String
  geekforgeeks           String?
  currentWorkStatus      CurrentWorkStatusEnum
  currentEducationStatus CurrentEducationStatusEnum
  educationPlace         String
  educationYear          Int?
  educationDegree        String?
  educationField         String?
  graduationYear         Int?
  tshirtSize             String?
  website                String?
  bio                    String
  country                String
  city                   String
  div                    String?
  createdAt              DateTime?                  @default(now())
  updatedAt              DateTime?                  @updatedAt
  user                   User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Otp {
  id        String    @id @default(uuid())
  email     String    @unique
  code      Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[]
}

enum StatusEnum {
  ACTIVE
  INACTIVE
}

enum JoinRequestEnum {
  REQUESTED
  APPROVED
  REJECTED
}

enum CurrentWorkStatusEnum {
  EMPLOYED
  UNEMPLOYED
}

enum CurrentEducationStatusEnum {
  CONTINUING
  GRADUATED
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

enum ComfortLevelEnum {
  COMFORTABLE
  UNCOMFORTABLE
}

enum SeasonTypeEnum {
  CAMP
  EDUCATION
  PROJECT
  IN_ACTIVE
}

enum ProblemDifficultyTypeEnum {
  EASY
  MEDIUM
  HARD
}

enum UserContestProblemStatusEnum {
  SOLVED_IN_CONTEST
  SOLVED_AFTER_CONTEST
  NOT_SOLVED
  UNABLE_TO_SOLVE
}

enum UserTopicProblemStatusEnum {
  SOLVED
  NOT_SOLVED
  UNABLE_TO_SOLVE
}

enum ResourceTypeEnum {
  VIDEO
  PPT
  PDF
  DOC
}
