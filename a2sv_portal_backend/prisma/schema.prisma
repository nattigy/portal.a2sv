generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
  //  url      = env("DB_URL")
  //  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Season {
  id             String          @id @default(uuid())
  name           String
  seasonType     SeasonTypeEnum  @default(IN_ACTIVE)
  duration       String
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean         @default(false)
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  groupSeasons   GroupSeason[]
  seasonTopics   SeasonTopic[]
  seasonContests SeasonContest[]
}

model Group {
  id           String        @id @default(uuid())
  name         String        @unique
  country      String?
  school       String?
  headId       String?       @unique
  head         User?         @relation("GroupHead", fields: [headId], references: [id])
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  users        User[]
  groupSeasons GroupSeason[]
}

model Contest {
  id             String          @id @default(uuid())
  name           String
  link           String
  div            String?
  startTime      DateTime
  endTime        DateTime
  problems       Problem[]
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  seasonContests SeasonContest[]
}

model Topic {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  seasonTopics SeasonTopic[]
}

model Problem {
  id                          String                        @id @default(uuid())
  title                       String
  platform                    String
  link                        String                        @unique
  difficulty                  ProblemDifficultyTypeEnum
  tags                        Tag[]
  createdAt                   DateTime?                     @default(now())
  updatedAt                   DateTime?                     @updatedAt
  contest                     Contest?                      @relation(fields: [contestId], references: [id])
  contestId                   String?
  seasonTopicProblems         SeasonTopicProblem[]
  seasonContestProblems       SeasonContestProblem[]
  GroupSeasonTopicProblem     GroupSeasonTopicProblem[]
  GroupSeasonContestProblem   GroupSeasonContestProblem[]
  UserGroupSeasonTopicProblem UserGroupSeasonTopicProblem[]
}

model User {
  id                 String            @id @default(uuid())
  firstName          String
  middleName         String
  lastName           String
  role               RoleEnum
  email              String            @unique
  password           String
  status             StatusEnum
  groupId            String?
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?
  headToGroup        Group?            @relation("GroupHead")
  group              Group?            @relation(fields: [groupId], references: [id])
  userProfile        UserProfile?
  headToGroupSeasons GroupSeason[]
  userGroupSeasons   UserGroupSeason[]
}

model SeasonTopic {
  seasonId            String
  topicId             String
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  season              Season               @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  topic               Topic                @relation(fields: [topicId], references: [id], onDelete: Cascade)
  seasonTopicProblems SeasonTopicProblem[]
  groupSeasonTopics   GroupSeasonTopic[]

  @@id([seasonId, topicId])
}

model SeasonTopicProblem {
  seasonId                 String
  topicId                  String
  problemId                String
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  problem                  Problem                   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  groupSeasonTopicProblems GroupSeasonTopicProblem[]

  @@id([seasonId, topicId, problemId])
}

model SeasonContest {
  seasonId              String
  contestId             String
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
  season                Season                 @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  contest               Contest                @relation(fields: [contestId], references: [id], onDelete: Cascade)
  groupSeasonContests   GroupSeasonContest[]
  seasonContestProblems SeasonContestProblem[]

  @@id([seasonId, contestId])
}

model SeasonContestProblem {
  seasonId                   String
  contestId                  String
  problemId                  String
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  seasonContest              SeasonContest               @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)
  problem                    Problem                     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  groupSeasonContestProblems GroupSeasonContestProblem[]

  @@id([seasonId, contestId, problemId])
}

model GroupSeason {
  groupId             String
  seasonId            String
  isActive            Boolean              @default(false)
  headId              String
  joinRequest         JoinRequestEnum      @default(REQUESTED)
  startDate           DateTime
  endDate             DateTime?
  //group stat info should be added here
  //number of students, total submissions, total accepted, acceptance rate
  //group contest rating, number of contest attended,
  //join request approved / pendding
  group               Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  season              Season               @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  head                User?                @relation(fields: [headId], references: [id])
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  groupSeasonTopics   GroupSeasonTopic[]
  userGroupSeasons    UserGroupSeason[]
  groupSeasonContests GroupSeasonContest[]

  @@id([groupId, seasonId])
}

model GroupSeasonTopic {
  groupId                  String
  seasonId                 String
  topicId                  String
  //group season topic stat should be added here
  // comfortablity percentage
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  groupSeason              GroupSeason               @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  seasonTopic              SeasonTopic               @relation(fields: [seasonId, topicId], references: [seasonId, topicId], onDelete: Cascade)
  groupSeasonTopicProblems GroupSeasonTopicProblem[]
  userGroupSeasonTopics    UserGroupSeasonTopic[]

  @@id([groupId, seasonId, topicId])
}

model GroupSeasonTopicProblem {
  groupId                      String
  seasonId                     String
  topicId                      String
  problemId                    String
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  groupSeasonTopic             GroupSeasonTopic              @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  seasonTopicProblem           SeasonTopicProblem            @relation(fields: [seasonId, topicId, problemId], references: [seasonId, topicId, problemId], onDelete: Cascade)
  problem                      Problem                       @relation(fields: [problemId], references: [id], onDelete: Cascade)
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]

  @@id([groupId, seasonId, topicId, problemId])
}

model GroupSeasonContest {
  groupId                    String
  seasonId                   String
  contestId                  String
  //group season contest stat should be added here
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  groupSeason                GroupSeason                 @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  seasonContest              SeasonContest               @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)
  groupSeasonContestProblems GroupSeasonContestProblem[]
  userGroupSeasonContests    UserGroupSeasonContest[]

  @@id([groupId, seasonId, contestId])
}

model GroupSeasonContestProblem {
  groupId                        String
  seasonId                       String
  contestId                      String
  problemId                      String
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  groupSeasonContest             GroupSeasonContest              @relation(fields: [groupId, seasonId, contestId], references: [groupId, seasonId, contestId], onDelete: Cascade)
  seasonContestProblem           SeasonContestProblem            @relation(fields: [seasonId, contestId, problemId], references: [seasonId, contestId, problemId], onDelete: Cascade)
  problem                        Problem                         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([groupId, seasonId, contestId, problemId])
}

model UserGroupSeason {
  userId                  String
  groupId                 String
  seasonId                String
  //user stat info should be added here
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupSeason             GroupSeason              @relation(fields: [groupId, seasonId], references: [groupId, seasonId], onDelete: Cascade)
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  userGroupSeasonTopics   UserGroupSeasonTopic[]
  userGroupSeasonContests UserGroupSeasonContest[]

  @@id([userId, groupId, seasonId])
}

model UserGroupSeasonTopic {
  userId                       String
  groupId                      String
  seasonId                     String
  topicId                      String
  comfortLevel                 ComfortLevelEnum              @default(UNCOMFORTABLE)
  createdAt                    DateTime?                     @default(now())
  updatedAt                    DateTime?                     @updatedAt
  userGroupSeason              UserGroupSeason               @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  groupSeasonTopic             GroupSeasonTopic              @relation(fields: [groupId, seasonId, topicId], references: [groupId, seasonId, topicId], onDelete: Cascade)
  userGroupSeasonTopicProblems UserGroupSeasonTopicProblem[]

  @@id([userId, groupId, seasonId, topicId])
}

model UserGroupSeasonTopicProblem {
  userId                  String
  groupId                 String
  seasonId                String
  topicId                 String
  problemId               String
  solved                  Boolean                 @default(false)
  solutionLink            String?
  attempts                Int                     @default(0)
  timeDedicated           Int                     @default(0)
  needHelp                Boolean                 @default(false)
  createdAt               DateTime?               @default(now())
  updatedAt               DateTime?               @updatedAt
  userGroupSeasonTopic    UserGroupSeasonTopic    @relation(fields: [userId, groupId, seasonId, topicId], references: [userId, groupId, seasonId, topicId], onDelete: Cascade)
  groupSeasonTopicProblem GroupSeasonTopicProblem @relation(fields: [groupId, seasonId, topicId, problemId], references: [groupId, seasonId, topicId, problemId], onDelete: Cascade)
  problem                 Problem                 @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([userId, groupId, seasonId, topicId, problemId])
}

model UserGroupSeasonContest {
  userId                         String
  groupId                        String
  seasonId                       String
  contestId                      String
  problemsSolved                 Int                             @default(0)
  wrongSubmissions               Int                             @default(0)
  rank                           Int                             @default(0)
  timeSpent                      Int                             @default(0)
  contestAttended                Boolean                         @default(false)
  createdAt                      DateTime?                       @default(now())
  updatedAt                      DateTime?                       @updatedAt
  userGroupSeason                UserGroupSeason                 @relation(fields: [userId, groupId, seasonId], references: [userId, groupId, seasonId], onDelete: Cascade)
  groupSeasonContest             GroupSeasonContest              @relation(fields: [groupId, seasonId, contestId], references: [groupId, seasonId, contestId], onDelete: Cascade)
  userGroupSeasonContestProblems UserGroupSeasonContestProblem[]

  @@id([userId, groupId, seasonId, contestId])
}

model UserGroupSeasonContestProblem {
  userId                    String
  groupId                   String
  seasonId                  String
  contestId                 String
  problemId                 String
  status                    UserContestProblemStatusEnum @default(NOT_SOLVED)
  numberOfAttempts          Int
  numberOfMinutes           Int
  createdAt                 DateTime?                    @default(now())
  updatedAt                 DateTime?                    @updatedAt
  userGroupSeasonContest    UserGroupSeasonContest       @relation(fields: [userId, groupId, seasonId, contestId], references: [userId, groupId, seasonId, contestId], onDelete: Cascade)
  groupSeasonContestProblem GroupSeasonContestProblem    @relation(fields: [groupId, seasonId, contestId, problemId], references: [groupId, seasonId, contestId, problemId], onDelete: Cascade)

  @@id([userId, groupId, seasonId, contestId, problemId])
}

model UserProfile {
  id                     String                     @id @default(uuid())
  userId                 String                     @unique
  photoUrl               String?
  phone                  String
  countryCode            String
  birthDate              DateTime?
  resumeLink             String
  github                 String?
  linkedin               String?
  twitter                String?
  facebook               String?
  instagram              String?
  leetcode               String
  codeforces             String
  hackerrank             String
  geekforgeeks           String?
  currentWorkStatus      CurrentWorkStatusEnum
  currentEducationStatus CurrentEducationStatusEnum
  educationPlace         String
  educationYear          Int?
  educationDegree        String?
  educationField         String?
  graduationYear         Int?
  tshirtSize             String?
  website                String?
  bio                    String
  userProfileAddress     UserProfileAddress?
  createdAt              DateTime?                  @default(now())
  updatedAt              DateTime?                  @updatedAt
  user                   User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfileAddress {
  profileId   String      @unique
  country     String
  city        String
  userProfile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId])
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[]
}

enum StatusEnum {
  ACTIVE
  INACTIVE
}

enum JoinRequestEnum {
  REQUESTED
  APPROVED
  REJECTED
}

enum CurrentWorkStatusEnum {
  EMPLOYED
  UNEMPLOYED
}

enum CurrentEducationStatusEnum {
  CONTINUING
  GRADUATED
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

enum ComfortLevelEnum {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

enum SeasonTypeEnum {
  CAMP
  EDUCATION
  PROJECT
  IN_ACTIVE
}

enum ProblemDifficultyTypeEnum {
  EASY
  MEDIUM
  HARD
}

enum UserContestProblemStatusEnum {
  SOLVED_IN_CONTEST
  SOLVED_AFTER_CONTEST
  NOT_SOLVED
  UNABLE_TO_SOLVE
}

//model ProgrammingPlatformHandle {
//  id             String      @id @default(uuid())
//  profileId      String
//  //type PlatformTypeEnum
//  platformName   String
//  platformHandle String
//  iconUrl        String
//  userProfile    UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//}

//model UserProblem {
//  problemId String
//  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
//  userId    String
//  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  solved    Boolean  @default(false)
//
//  @@id([problemId, userId])
//}
//
//model UserAnalytics {
//  userId      String
//  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt   DateTime @default(now()) @db.Date
//  updatedAt   DateTime @updatedAt @db.Date
//  solvedCount Int      @default(0)
//  wrongCount  Int      @default(0)
//
//  @@id([userId, createdAt])
//}
