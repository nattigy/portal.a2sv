// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  email    String
  password String

  Groups UsersOnGroup[]
}

model Region {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  region_name String
  Group       Group[]
}

model Group {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  region     Region         @relation(fields: [region_id], references: [id])
  region_id  Int
  group_name String
  group_size Int
  members    UsersOnGroup[] 
  topics GroupOnTopicOnSeason[]
  status     String
}

model UsersOnGroup {
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([groupId, userId])
}

model GroupOnTopicOnSeason{
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int

  topic Topic @relation(fields: [topicId], references: [id])
  topicId Int

  season Season @relation(fields: [seasonId], references: [id])
  seasonId Int

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([groupId, topicId, seasonId])

}

model Season{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  season_name String
  start_date DateTime
  end_date DateTime

  Topic Topic[]
  Topics GroupOnTopicOnSeason[]
}



model Topic{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  topic_name String
  season     Season         @relation(fields: [season_id], references: [id])
  season_id  Int
  Groups GroupOnTopicOnSeason[]
}
