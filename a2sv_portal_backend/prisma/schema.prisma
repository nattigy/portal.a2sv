generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  //  url               = env("LOCAL_DB_URL")
  url      = env("DB_URL")
  //  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id                 String               @id @default(uuid())
  name               String
  country            String?
  school             String?
  headId             String?              @unique
  head               User?                @relation("GroupHead", fields: [headId], references: [id])
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  User               User[]
  GroupSeasonTopic   GroupSeasonTopic[]
  GroupSeasonContest GroupSeasonContest[]
}

model Season {
  id            String          @id @default(uuid())
  name          String
  seasonType    SeasonType      @default(EDUCATION)
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean         @default(false)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  SeasonTopic   SeasonTopic[]
  SeasonContest SeasonContest[]
}

model Contest {
  id            String          @id @default(uuid())
  name          String
  link          String
  div           String?
  startTime     DateTime
  endTime       DateTime
  problems      Problem[]
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  SeasonContest SeasonContest[]
  UserContest   UserContest[]
}

model Topic {
  id          String        @id @default(uuid())
  name        String
  description String
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  Problem     Problem[]
  UserTopic   UserTopic[]
  SeasonTopic SeasonTopic[]
}

model Problem {
  id                 String               @id @default(uuid())
  title              String
  platform           String
  link               String
  difficulty         String
  tags               Tag[]
  topicId            String
  topic              Topic?               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  Contest            Contest?             @relation(fields: [contestId], references: [id])
  contestId          String?
  SeasonTopicProblem SeasonTopicProblem[]
  UserContestProblem UserContestProblem[]
}

model User {
  id                     String                   @id @default(uuid())
  role                   RoleEnum
  email                  String                   @unique
  password               String
  status                 Status
  group                  Group?                   @relation(fields: [groupId], references: [id])
  groupId                String?
  createdAt              DateTime?                @default(now())
  updatedAt              DateTime?
  headToGroup            Group?                   @relation("GroupHead")
  UserTopic              UserTopic[]
  UserContest            UserContest[]
  SeasonTopicProblemUser SeasonTopicProblemUser[]
  UserProfile            UserProfile?
}

model UserTopic {
  userId       String
  topicId      String
  comfortLevel ComfortLevel @default(UNCOMFORTABLE)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        Topic        @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
}

model SeasonTopic {
  seasonId           String
  topicId            String
  season             Season?              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  topic              Topic?               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  GroupSeasonTopic   GroupSeasonTopic[]
  SeasonTopicProblem SeasonTopicProblem[]

  @@id([seasonId, topicId])
  @@unique([topicId, seasonId])
}

model SeasonContest {
  seasonId           String
  contestId          String
  season             Season?              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  contest            Contest?             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  GroupSeasonContest GroupSeasonContest[]

  @@id([seasonId, contestId])
  @@unique([contestId, seasonId])
}

model GroupSeasonTopic {
  groupId     String
  seasonId    String
  topicId     String
  seasonTopic SeasonTopic @relation(fields: [topicId, seasonId], references: [topicId, seasonId], onDelete: Cascade)
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @updatedAt

  @@id([seasonId, topicId, groupId])
}

model SeasonTopicProblem {
  seasonId               String
  topicId                String
  problemId              String
  seasonTopic            SeasonTopic              @relation(fields: [topicId, seasonId], references: [topicId, seasonId], onDelete: Cascade)
  problem                Problem                  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createdAt              DateTime?                @default(now())
  updatedAt              DateTime?                @updatedAt
  SeasonTopicProblemUser SeasonTopicProblemUser[]

  @@id([seasonId, topicId, problemId])
}

model GroupSeasonContest {
  groupId       String
  seasonId      String
  contestId     String
  group         Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  seasonContest SeasonContest @relation(fields: [contestId, seasonId], references: [contestId, seasonId], onDelete: Cascade)

  @@id([groupId, contestId, seasonId])
}

model UserContest {
  userId             String
  contestId          String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest            Contest              @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problemsSolved     Int                  @default(0)
  wrongSubmissions   Int                  @default(0)
  rank               Int                  @default(0)
  timeSpent          Int                  @default(0)
  contestAttended    Boolean              @default(false)
  UserContestProblem UserContestProblem[]

  @@id([userId, contestId])
}

model UserContestProblem {
  userId           String
  contestId        String
  problemId        String
  userContest      UserContest?             @relation(fields: [userId, contestId], references: [userId, contestId], onDelete: Cascade)
  problem          Problem                  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  status           UserContestProblemStatus @default(NOT_SOLVED)
  numberOfAttempts Int
  numberOfMinutes  Int

  @@id([userId, contestId, problemId])
}

model SeasonTopicProblemUser {
  seasonId           String
  topicId            String
  problemId          String
  userId             String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  solved             Boolean            @default(false)
  solutionLink       String?
  attempts           Int                @default(0)
  timeDedicated      Int                @default(0)
  needHelp           Boolean            @default(false)
  seasonTopicProblem SeasonTopicProblem @relation(fields: [topicId, problemId, seasonId], references: [topicId, problemId, seasonId], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([seasonId, topicId, problemId, userId])
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  firstName       String?
  lastName        String?
  photoUrl        String?
  phone           String?
  birthDate       DateTime?
  resumeLink      String?
  github          String?
  linkedin        String?
  twitter         String?
  facebook        String?
  instagram       String?
  leetcode        String?
  codeforces      String?
  hackerrank      String?
  geekforgeeks    String?
  educationPlace  String?
  educationYear   Int?
  educationDegree String?
  educationField  String?
  graduationYear  Int?
  tshirtSize      String?
  website         String?
  bio             String?
  country         String?
  city            String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

enum Status {
  ACTIVE
  INACTIVE
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[]
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

enum ComfortLevel {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

enum SeasonType {
  CAMP
  EDUCATION
  PROJECT
}

enum UserContestProblemStatus {
  SOLVED_IN_CONTEST
  SOLVED_AFTER_CONTEST
  NOT_SOLVED
  UNABLE_TO_SOLVE
}

//model UserProblem {
//  problemId String
//  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
//  userId    String
//  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  solved    Boolean  @default(false)
//
//  @@id([problemId, userId])
//}
//
//model UserAnalytics {
//  userId      String
//  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt   DateTime @default(now()) @db.Date
//  updatedAt   DateTime @updatedAt @db.Date
//  solvedCount Int      @default(0)
//  wrongCount  Int      @default(0)
//
//  @@id([userId, createdAt])
//}
