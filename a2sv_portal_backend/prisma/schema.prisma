generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime?          @default(now())
  updatedAt    DateTime?          @updatedAt
  name         String
  country      String?
  school       String?
  users        User[]
  seasonTopics GroupTopicSeason[]
  headId       Int?               @unique
  head         User?              @relation("GroupHead", fields: [headId], references: [id])
}

enum SeasonType {
  CAMP
  EDUCATION
  PROJECT
}

model Season {
  id          Int                @id @default(autoincrement())
  name        String
  seasonType  SeasonType         @default(EDUCATION)
  startDate   DateTime           @default(now())
  endDate     DateTime           @default(now())
  createdAt   DateTime?          @default(now())
  updatedAt   DateTime?          @updatedAt
  groupTopics GroupTopicSeason[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model User {
  id                       Int                           @id @default(autoincrement())
  role                     RoleEnum
  email                    String                        @unique
  password                 String
  userProfile              UserProfile?
  status                   Status
  group                    Group?                        @relation(fields: [groupId], references: [id])
  groupId                  Int?
  createdAt                DateTime?                     @default(now())
  updatedAt                DateTime?
  groupTopicSeasonProblems GroupTopicSeasonProblemUser[]
  headToGroup              Group?                        @relation("GroupHead")
  topics                   UserTopic[]
}

enum ComfortLevel {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

model UserTopic {
  userId       Int
  topicId      Int
  comfortLevel ComfortLevel @default(UNCOMFORTABLE)
  user         User         @relation(fields: [userId], references: [id])
  topic        Topic        @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
}

model UserProfile {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  firstName       String?
  lastName        String?
  photoUrl        String?
  phone           String?
  birthDate       DateTime?
  resumeLink      String?
  github          String?
  linkedin        String?
  twitter         String?
  facebook        String?
  instagram       String?
  leetcode        String?
  codeforces      String?
  hackerrank      String?
  geekforgeeks    String?
  educationPlace  String?
  educationYear   Int?
  educationDegree String?
  educationField  String?
  graduationYear  Int?
  tshirtSize      String?
  website         String?
  bio             String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Topic {
  id           Int                @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime?          @default(now())
  updatedAt    DateTime?          @updatedAt
  seasonGroups GroupTopicSeason[]
  users        UserTopic[]
}

enum Status {
  ACTIVE
  INACTIVE
}

model Problem {
  id                Int                       @id @default(autoincrement())
  title             String
  platform          String
  link              String
  difficulty        String
  tags              Tag[]
  createdAt         DateTime?                 @default(now())
  updatedAt         DateTime?                 @updatedAt
  seasonGroupTopics GroupTopicSeasonProblem[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

model GroupTopicSeason {
  groupId   Int
  topicId   Int
  seasonId  Int
  createdAt DateTime?                 @default(now())
  updatedAt DateTime?                 @updatedAt
  group     Group?                    @relation(fields: [groupId], references: [id])
  topic     Topic?                    @relation(fields: [topicId], references: [id])
  season    Season?                   @relation(fields: [seasonId], references: [id])
  problems  GroupTopicSeasonProblem[]

  @@id([groupId, topicId, seasonId])
}

model GroupTopicSeasonProblem {
  problemId        Int
  groupId          Int
  topicId          Int
  seasonId         Int
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  seasonGroupTopic GroupTopicSeason              @relation(fields: [groupId, topicId, seasonId], references: [groupId, topicId, seasonId])
  problem          Problem                       @relation(fields: [problemId], references: [id])
  users            GroupTopicSeasonProblemUser[]

  @@id([problemId, groupId, topicId, seasonId])
}

model GroupTopicSeasonProblemUser {
  problemId               Int
  groupId                 Int
  topicId                 Int
  userId                  Int
  seasonId                Int
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  seasonGroupTopicProblem GroupTopicSeasonProblem @relation(fields: [groupId, topicId, problemId, seasonId], references: [groupId, topicId, problemId, seasonId])
  user                    User                    @relation(fields: [userId], references: [id])
  solved                  Boolean                 @default(false)
  solutionLink            String?
  attempts                Int                     @default(0)
  needHelp                Boolean                 @default(false)

  @@id([groupId, topicId, problemId, seasonId, userId])
}
