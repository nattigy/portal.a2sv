generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
  //  url      = env("DB_URL")
  //  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id                  String               @id @default(uuid())
  name                String               @unique
  country             String?
  school              String?
  headId              String?              @unique
  head                User?                @relation("GroupHead", fields: [headId], references: [id])
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  users               User[]
  groupSeasons        GroupSeason[]
  groupSeasonTopics   GroupSeasonTopic[]
  groupSeasonContests GroupSeasonContest[]
}

model Season {
  id             String          @id @default(uuid())
  name           String
  seasonType     SeasonType      @default(EDUCATION)
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean         @default(false)
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  groupSeasons   GroupSeason[]
  seasonTopics   SeasonTopic[]
  seasonContests SeasonContest[]
  UserSeason     UserSeason[]
}

model Contest {
  id                 String              @id @default(uuid())
  name               String
  link               String
  div                String?
  startTime          DateTime
  endTime            DateTime
  problems           Problem[]
  createdAt          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
  seasonContests     SeasonContest[]
  userSeasonContests UserSeasonContest[]
}

model Topic {
  id           String        @id @default(uuid())
  name         String
  description  String
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
  problems     Problem[]
  userTopics   UserTopic[]
  seasonTopics SeasonTopic[]
}

model Problem {
  id                        String                     @id @default(uuid())
  title                     String
  platform                  String
  link                      String
  difficulty                ProblemDifficultyType
  tags                      Tag[]
  topicId                   String?
  topic                     Topic?                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt                 DateTime?                  @default(now())
  updatedAt                 DateTime?                  @updatedAt
  contests                  Contest[]
  seasonTopicProblems       SeasonTopicProblem[]
  userSeasonContestProblems UserSeasonContestProblem[]
  GroupSeasonTopicProblem   GroupSeasonTopicProblem[]
}

model User {
  id                      String                   @id @default(uuid())
  role                    RoleEnum
  email                   String                   @unique
  password                String
  status                  Status
  group                   Group?                   @relation(fields: [groupId], references: [id])
  groupId                 String?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?
  headToGroup             Group?                   @relation("GroupHead")
  userTopics              UserTopic[]
  userSeasonContests      UserSeasonContest[]
  userSeasonTopicProblems UserSeasonTopicProblem[]
  userProfile             UserProfile?
  GroupSeason             GroupSeason[]
  UserSeason              UserSeason[]
}

model GroupSeason {
  groupId   String
  seasonId  String
  isActive  Boolean
  headId    String
  //group stat info should be added here
  group     Group     @relation(fields: [groupId], references: [id])
  season    Season    @relation(fields: [seasonId], references: [id])
  head      User?     @relation(fields: [headId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([groupId, seasonId])
}

model UserSeason {
  userId    String
  seasonId  String
  //user stat info should be added here
  user      User      @relation(fields: [userId], references: [id])
  season    Season    @relation(fields: [seasonId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, seasonId])
}

model UserTopic {
  userId       String
  topicId      String
  comfortLevel ComfortLevel @default(UNCOMFORTABLE)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        Topic        @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt

  @@id([userId, topicId])
}

model SeasonTopic {
  seasonId            String
  topicId             String
  season              Season?              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  topic               Topic?               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  groupSeasonTopics   GroupSeasonTopic[]
  seasonTopicProblems SeasonTopicProblem[]

  @@id([seasonId, topicId])
  @@unique([topicId, seasonId])
}

model SeasonContest {
  seasonId            String
  contestId           String
  season              Season?              @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  contest             Contest?             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  createdAt           DateTime?            @default(now())
  updatedAt           DateTime?            @updatedAt
  groupSeasonContests GroupSeasonContest[]
  UserSeasonContest   UserSeasonContest[]

  @@id([seasonId, contestId])
  @@unique([contestId, seasonId])
}

model GroupSeasonTopic {
  groupId                  String
  seasonId                 String
  topicId                  String
  //group season topic stat should be added here
  seasonTopic              SeasonTopic               @relation(fields: [topicId, seasonId], references: [topicId, seasonId], onDelete: Cascade)
  group                    Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt                DateTime?                 @default(now())
  updatedAt                DateTime?                 @updatedAt
  groupSeasonTopicProblems GroupSeasonTopicProblem[]

  @@id([seasonId, topicId, groupId])
}

model GroupSeasonTopicProblem {
  groupId          String
  seasonId         String
  topicId          String
  problemId        String
  display          Boolean
  groupSeasonTopic GroupSeasonTopic @relation(fields: [topicId, seasonId, groupId], references: [topicId, seasonId, groupId], onDelete: Cascade)
  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([seasonId, topicId, groupId, problemId])
}

model SeasonTopicProblem {
  seasonId                String
  topicId                 String
  problemId               String
  seasonTopic             SeasonTopic?             @relation(fields: [topicId, seasonId], references: [topicId, seasonId], onDelete: Cascade)
  problem                 Problem                  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  userSeasonTopicProblems UserSeasonTopicProblem[]

  @@id([seasonId, topicId, problemId])
}

model GroupSeasonContest {
  groupId       String
  seasonId      String
  contestId     String
  //group season contest stat should be added here
  group         Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  seasonContest SeasonContest @relation(fields: [contestId, seasonId], references: [contestId, seasonId], onDelete: Cascade)
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt

  @@id([groupId, contestId, seasonId])
}

model UserSeasonContest {
  userId                   String
  seasonId                 String
  contestId                String
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  seasonContest            SeasonContest              @relation(fields: [seasonId, contestId], references: [seasonId, contestId], onDelete: Cascade)
  problemsSolved           Int                        @default(0)
  wrongSubmissions         Int                        @default(0)
  rank                     Int                        @default(0)
  timeSpent                Int                        @default(0)
  contestAttended          Boolean                    @default(false)
  createdAt                DateTime?                  @default(now())
  updatedAt                DateTime?                  @updatedAt
  Contest                  Contest                    @relation(fields: [contestId], references: [id])
  UserSeasonContestProblem UserSeasonContestProblem[]

  @@id([userId, contestId, seasonId])
}

model UserSeasonContestProblem {
  userId            String
  seasonId          String
  contestId         String
  problemId         String
  userSeasonContest UserSeasonContest?       @relation(fields: [userId, contestId, seasonId], references: [userId, contestId, seasonId], onDelete: Cascade)
  problem           Problem                  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  status            UserContestProblemStatus @default(NOT_SOLVED)
  numberOfAttempts  Int
  numberOfMinutes   Int
  createdAt         DateTime?                @default(now())
  updatedAt         DateTime?                @updatedAt

  @@id([userId, contestId, problemId, seasonId])
}

model UserSeasonTopicProblem {
  seasonId           String
  topicId            String
  problemId          String
  userId             String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  solved             Boolean            @default(false)
  solutionLink       String?
  attempts           Int                @default(0)
  timeDedicated      Int                @default(0)
  needHelp           Boolean            @default(false)
  seasonTopicProblem SeasonTopicProblem @relation(fields: [topicId, problemId, seasonId], references: [topicId, problemId, seasonId], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([seasonId, topicId, problemId, userId])
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  firstName       String?
  lastName        String?
  photoUrl        String?
  phone           String?
  birthDate       DateTime?
  resumeLink      String?
  github          String?
  linkedin        String?
  twitter         String?
  facebook        String?
  instagram       String?
  leetcode        String?
  codeforces      String?
  hackerrank      String?
  geekforgeeks    String?
  educationPlace  String?
  educationYear   Int?
  educationDegree String?
  educationField  String?
  graduationYear  Int?
  tshirtSize      String?
  website         String?
  bio             String?
  country         String?
  city            String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[]
}

enum Status {
  ACTIVE
  INACTIVE
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

enum ComfortLevel {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

enum SeasonType {
  CAMP
  EDUCATION
  PROJECT
  IN_ACTIVE
}

enum ProblemDifficultyType {
  EASY
  MEDIUM
  HARD
}

enum UserContestProblemStatus {
  SOLVED_IN_CONTEST
  SOLVED_AFTER_CONTEST
  NOT_SOLVED
  UNABLE_TO_SOLVE
}

//model UserProblem {
//  problemId String
//  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
//  userId    String
//  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  solved    Boolean  @default(false)
//
//  @@id([problemId, userId])
//}
//
//model UserAnalytics {
//  userId      String
//  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt   DateTime @default(now()) @db.Date
//  updatedAt   DateTime @updatedAt @db.Date
//  solvedCount Int      @default(0)
//  wrongCount  Int      @default(0)
//
//  @@id([userId, createdAt])
//}
