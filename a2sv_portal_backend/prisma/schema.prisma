generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("LOCAL_DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Group {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  country   String?
  school    String?
  users     User[]
  seasons   Season[]
  headId    String?   @unique
  head      User?     @relation("GroupHead", fields: [headId], references: [id])
}

enum SeasonType {
  CAMP
  EDUCATION
  PROJECT
}

model Season {
  id         String        @id @default(uuid())
  name       String
  seasonType SeasonType    @default(EDUCATION)
  startDate  DateTime      @default(now())
  endDate    DateTime      @default(now())
  createdAt  DateTime?     @default(now())
  updatedAt  DateTime?     @updatedAt
  topics     SeasonTopic[]
  group      Group         @relation(fields: [groupId], references: [id])
  groupId    String
  isActive   Boolean       @default(false)
}

model Permission {
  id          String    @id @default(uuid())
  action      String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
}

model User {
  id                  String                   @id @default(uuid())
  role                RoleEnum
  email               String                   @unique
  password            String
  userProfile         UserProfile?
  status              Status
  group               Group?                   @relation(fields: [groupId], references: [id])
  groupId             String?
  createdAt           DateTime?                @default(now())
  updatedAt           DateTime?
  seasonTopicProblems SeasonTopicProblemUser[]
  headToGroup         Group?                   @relation("GroupHead")
  topics              UserTopic[]
}

enum ComfortLevel {
  COMFORTABLE
  UNCOMFORTABLE
  MEDIOCRE
}

model UserTopic {
  userId       String
  topicId      String
  comfortLevel ComfortLevel @default(UNCOMFORTABLE)
  user         User         @relation(fields: [userId], references: [id])
  topic        Topic        @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  firstName       String?
  lastName        String?
  photoUrl        String?
  phone           String?
  birthDate       DateTime?
  resumeLink      String?
  github          String?
  linkedin        String?
  twitter         String?
  facebook        String?
  instagram       String?
  leetcode        String?
  codeforces      String?
  hackerrank      String?
  geekforgeeks    String?
  educationPlace  String?
  educationYear   Int?
  educationDegree String?
  educationField  String?
  graduationYear  Int?
  tshirtSize      String?
  website         String?
  bio             String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Topic {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  users       UserTopic[]
  seasons     SeasonTopic[]
}

enum Status {
  ACTIVE
  INACTIVE
}

model Problem {
  id           String               @id @default(uuid())
  title        String
  platform     String
  link         String
  difficulty   String
  tags         Tag[]
  createdAt    DateTime?            @default(now())
  updatedAt    DateTime?            @updatedAt
  seasonTopics SeasonTopicProblem[]
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  problems Problem[]
}

enum RoleEnum {
  STUDENT
  HEAD_OF_EDUCATION
  HEAD_OF_ACADEMY
  ASSISTANT
  ADMIN
}

model SeasonTopic {
  topicId   String
  seasonId  String
  createdAt DateTime?            @default(now())
  updatedAt DateTime?            @updatedAt
  topic     Topic?               @relation(fields: [topicId], references: [id])
  season    Season?              @relation(fields: [seasonId], references: [id])
  problems  SeasonTopicProblem[]

  @@id([seasonId, topicId])
}

model SeasonTopicProblem {
  problemId   String
  topicId     String
  seasonId    String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  seasonTopic SeasonTopic              @relation(fields: [topicId, seasonId], references: [topicId, seasonId])
  problem     Problem                  @relation(fields: [problemId], references: [id])
  users       SeasonTopicProblemUser[]

  @@id([seasonId, topicId, problemId])
}

model SeasonTopicProblemUser {
  problemId               String
  topicId                 String
  userId                  String
  seasonId                String
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  seasonTopicProblem      SeasonTopicProblem @relation(fields: [topicId, problemId, seasonId], references: [topicId, problemId, seasonId])
  user                    User               @relation(fields: [userId], references: [id])
  solved                  Boolean            @default(false)
  solutionLink            String?
  attempts                Int                     @default(0)
  timeDedicated           Int                     @default(0)
  needHelp                Boolean                 @default(false)
  timeDedicated           Int                     @default(0)

  @@id([seasonId, topicId, problemId, userId])
}
